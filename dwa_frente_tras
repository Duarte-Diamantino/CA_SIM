#include <rclcpp/rclcpp.hpp>
#include <nav_msgs/msg/odometry.hpp>
#include <geometry_msgs/msg/pose_stamped.hpp>
#include <visualization_msgs/msg/marker_array.hpp>
#include <std_msgs/msg/float64.hpp>

#include <vector>
#include <cmath>
#include <algorithm>

struct Pt { double x, y; };

// DWA parameters
double constexpr INITIAL_HORIZON   = 2.0;      // prediction horizon (s)
double constexpr MAX_HORIZON       = 5.0;      // max horizon (s)
double constexpr STEP_HORIZON      = 0.1;      // horizon increment (s)
double constexpr DT                = 0.1;      // integration step (s)
int    constexpr NV                = 7;        // velocity samples
int    constexpr NG                = 7;        // steering angle samples
double constexpr V_MAX_MS          = 3.0;      // max linear speed (m/s)
double constexpr GAMMA_MAX_RAD     = M_PI/6.0; // max steering angle ±30°
double constexpr WHEEL_BASE        = 0.335;    // wheel base (m)
double constexpr GOAL_TOL          = 0.05;     // tolerance (m)
double constexpr MAX_RAW_SPEED_CMD = 23070.0; // raw speed units

// Servo mapping constants
static constexpr double SERVO_CENTER = 0.5304;
static constexpr double SERVO_MAX    = 0.94299;
static constexpr double SERVO_MIN    = 0.11781;

double normalizeAngle(double a) {
  while (a >  M_PI) a -= 2*M_PI;
  while (a < -M_PI) a += 2*M_PI;
  return a;
}

class DwaController : public rclcpp::Node {
public:
  DwaController()
  : Node("dwa_controller"), have_odom_(false), have_goal_(false), last_gamma_(0.0), last_direction_(1)
  {
    odom_sub_ = create_subscription<nav_msgs::msg::Odometry>(
      "/vesc/odom", 10,
      std::bind(&DwaController::odomCb, this, std::placeholders::_1)
    );
    goal_sub_ = create_subscription<geometry_msgs::msg::PoseStamped>(
      "/goal", 10,
      std::bind(&DwaController::goalCb, this, std::placeholders::_1)
    );
    obs_sub_ = create_subscription<visualization_msgs::msg::MarkerArray>(
      "/obstacles_marker", 10,
      std::bind(&DwaController::obsCb, this, std::placeholders::_1)
    );

    speed_pub_ = create_publisher<std_msgs::msg::Float64>(
      "/commands/motor/speed", 10
    );
    steer_pub_ = create_publisher<std_msgs::msg::Float64>(
      "/commands/servo/position", 10
    );
    marker_pub_ = create_publisher<visualization_msgs::msg::MarkerArray>(
      "/predicted_trajectories", 10
    );

    timer_ = create_wall_timer(
      std::chrono::milliseconds(int(DT*1000)),
      std::bind(&DwaController::update, this)
    );
  }

private:
  // State
  double x_, y_, yaw_;
  bool have_odom_, have_goal_;
  double goal_x_, goal_y_;
  std::vector<Pt> obstacles_;
  double last_gamma_;
  int last_direction_; // 1 for forward, -1 for backward

  // ROS interfaces
  rclcpp::Subscription<nav_msgs::msg::Odometry>::SharedPtr odom_sub_;
  rclcpp::Subscription<geometry_msgs::msg::PoseStamped>::SharedPtr goal_sub_;
  rclcpp::Subscription<visualization_msgs::msg::MarkerArray>::SharedPtr obs_sub_;
  rclcpp::Publisher<std_msgs::msg::Float64>::SharedPtr speed_pub_, steer_pub_;
  rclcpp::Publisher<visualization_msgs::msg::MarkerArray>::SharedPtr marker_pub_;
  rclcpp::TimerBase::SharedPtr timer_;

  void odomCb(const nav_msgs::msg::Odometry::SharedPtr m) {
    x_ = m->pose.pose.position.x;
    y_ = m->pose.pose.position.y;
    auto &q = m->pose.pose.orientation;
    yaw_ = std::atan2(2*(q.w*q.z + q.x*q.y), 1 - 2*(q.y*q.y + q.z*q.z));
    have_odom_ = true;
  }

  void goalCb(const geometry_msgs::msg::PoseStamped::SharedPtr m) {
    goal_x_ = m->pose.position.x;
    goal_y_ = m->pose.position.y;
    have_goal_ = true;
    RCLCPP_INFO(get_logger(), "Goal set: [%.2f, %.2f]", goal_x_, goal_y_);
  }

  void obsCb(const visualization_msgs::msg::MarkerArray::SharedPtr m) {
    obstacles_.clear();
    for (auto &mk : m->markers) {
      obstacles_.push_back({mk.pose.position.x, mk.pose.position.y});
    }
  }

  void update() {
    if (!have_odom_ || !have_goal_) return;

    double best_v = 0.0, best_gamma = 0.0;
    std::vector<Pt> best_traj;
    double best_cost = -1e9;

    visualization_msgs::msg::MarkerArray ma;
    ma.markers.reserve(NV * NG + 1);
    auto now = this->now();
    const std::string frame = "vesc/odom";
    int id = 0;

    for (int iv = 0; iv < NV; ++iv) {
      double v = -V_MAX_MS + 2*V_MAX_MS * iv / (NV - 1);
      int direction = (v >= 0.0) ? 1 : -1;

      for (int ig = 0; ig < NG; ++ig) {
        double gamma = -GAMMA_MAX_RAD + 2*GAMMA_MAX_RAD * ig / (NG - 1);

        double direction_change_penalty = 0.0;
        if ((last_gamma_ * gamma < 0.0) && std::abs(gamma - last_gamma_) > 0.4)
          direction_change_penalty = -1.0;

        int steps = int(INITIAL_HORIZON / DT);
        double sx = x_, sy = y_, syaw = yaw_;
        std::vector<Pt> traj;
        traj.reserve(steps+1);
        double min_d = 1e9;
        const double OBSTACLE_TOL = 0.15;
        bool collision = false;
        for (int k = 0; k <= steps; ++k) {
          traj.push_back({sx, sy});
          for (auto &o : obstacles_) {
            double d = std::hypot(sx - o.x, sy - o.y);
            if (d < OBSTACLE_TOL) collision = true;
            min_d = std::min(min_d, d);
          }
          sx   += v * std::cos(syaw) * DT;
          sy   += v * std::sin(syaw) * DT;
          double gamma_effective = (direction == 1) ? gamma : -gamma;
          syaw += (v / WHEEL_BASE) * std::tan(gamma_effective) * DT;
        }
        if (collision) continue;
        double dg = std::hypot(sx - goal_x_, sy - goal_y_);
        double motion_cost = -std::abs(gamma - last_gamma_);
        double w_goal = 2.0;
        double w_obs = 1.0;
        double cost = -w_goal * dg + w_obs * min_d + motion_cost + direction_change_penalty;

        // Penaliza mudança de direção
        if (direction != last_direction_) {
          cost -= std::abs(best_cost) + 1.0; // piora o suficiente para nunca ser escolhido
        }

        visualization_msgs::msg::Marker m;
        m.header.frame_id = frame;
        m.header.stamp = now;
        m.ns = "all_traj";
        m.id = id++;
        m.type = visualization_msgs::msg::Marker::LINE_STRIP;
        m.action = visualization_msgs::msg::Marker::ADD;
        m.scale.x = 0.005;
        if (min_d < OBSTACLE_TOL) {
          m.color.r = 1.0; m.color.g = 0.0; m.color.b = 0.0; m.color.a = 0.9;
        } else {
          m.color.r = 0.5; m.color.g = 0.5; m.color.b = 0.5; m.color.a = 0.6;
        }
        for (auto &pt : traj) {
          geometry_msgs::msg::Point p; p.x = pt.x; p.y = pt.y; p.z = 0.0;
          m.points.push_back(p);
        }
        ma.markers.push_back(m);

        if (cost > best_cost) {
          best_cost = cost;
          best_v = v;
          best_gamma = gamma;
          best_traj = traj;
        }
      }
    }

    last_gamma_ = best_gamma;
    last_direction_ = (best_v >= 0.0) ? 1 : -1;

    visualization_msgs::msg::Marker mb;
    mb.header.frame_id = frame;
    mb.header.stamp = now;
    mb.ns = "best_traj";
    mb.id = id++;
    mb.type = visualization_msgs::msg::Marker::LINE_STRIP;
    mb.action = visualization_msgs::msg::Marker::ADD;
    mb.scale.x = 0.01;
    mb.color.r = 0.0; mb.color.g = 1.0; mb.color.b = 1.0; mb.color.a = 1.0;
    for (auto &pt : best_traj) {
      geometry_msgs::msg::Point p; p.x = pt.x; p.y = pt.y; p.z = 0.0;
      mb.points.push_back(p);
    }
    ma.markers.push_back(mb);

    marker_pub_->publish(ma);

    std_msgs::msg::Float64 sp, st;
    double raw = best_v / V_MAX_MS * MAX_RAW_SPEED_CMD;
    sp.data = std::clamp(raw, -MAX_RAW_SPEED_CMD, MAX_RAW_SPEED_CMD);
    speed_pub_->publish(sp);
    RCLCPP_INFO(get_logger(), "Publishing speed: %.2f raw", sp.data);
    double span = SERVO_MAX - SERVO_CENTER;
    double gamma_corrected = (best_v >= 0.0) ? -best_gamma : best_gamma;
    st.data = std::clamp(SERVO_CENTER + (gamma_corrected / GAMMA_MAX_RAD) * span,
                         SERVO_MIN, SERVO_MAX);
    steer_pub_->publish(st);
    RCLCPP_INFO(get_logger(), "Publishing steer: %.3f", st.data);
  }
};

int main(int argc, char **argv) {
  rclcpp::init(argc, argv);
  rclcpp::spin(std::make_shared<DwaController>());
  rclcpp::shutdown();
  return 0;
}
